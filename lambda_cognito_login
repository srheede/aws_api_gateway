from __future__ import print_function
import boto3
import botocore.exceptions
import hmac
import hashlib
import base64
import json
import uuid
import binascii
import os
 
# MODIFY
USER_POOL_ID = ''
CLIENT_ID = ''
CLIENT_SECRET = ''

client = None

def get_secret_hash(username):
    msg = username + CLIENT_ID
    dig = hmac.new(str(CLIENT_SECRET).encode('utf-8'), 
        msg = str(msg).encode('utf-8'), digestmod=hashlib.sha256).digest()
    d2 = base64.b64encode(dig).decode()
    return d2

ERROR = 0
SUCCESS = 1
USER_EXISTS = 2
    
def sign_up(username, password):
    try:
        resp = client.sign_up(
            ClientId=CLIENT_ID,
            SecretHash=get_secret_hash(username),
            Username=username,
            Password=password)
        print(resp)
    except client.exceptions.UsernameExistsException as e:
        return USER_EXISTS
    except Exception as e:
        print(e)
        return ERROR
    return SUCCESS
    
def initiate_auth(username, password):
    try:
        resp = client.admin_initiate_auth(
            UserPoolId=USER_POOL_ID,
            ClientId=CLIENT_ID,
            AuthFlow='ADMIN_NO_SRP_AUTH',
            AuthParameters={
                'USERNAME': username,
                'SECRET_HASH': get_secret_hash(username),
                'PASSWORD': password
            },
            ClientMetadata={
                'username': username,
                'password': password
            })
    except client.exceptions.NotAuthorizedException as e:
        return None, "The username or password is incorrect"
    except Exception as e:
        print(e)
        return None, "Unknown error"
    return resp, None

def lambda_handler(event, context):
    from datetime import datetime
    now = datetime.now()
    time = now.strftime("%Y-%m-%d %H:%M:%S")
    
    global client
    if client == None:
        client = boto3.client('cognito-idp')

    line = json.dumps(event)
    array = line.split()
    body = {}
    for element in array:
        if 'name' in element:
            section = element.split('\\"\\r\\n\\r\\n', 1)
            key = section[0].replace('name=\\"','')
            value = section[1].split('\\r\\n-----------------', 1)
            body[key] = value[0]
    

    username = body['client_id']
    password = body['client_secret']
    is_new = "false"
    user_id = str(uuid.uuid4())
    signed_up = sign_up(username, password)
    if signed_up == ERROR:
        return {
        'statusCode': 403,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps('Invalid Credentials')
    }
    if signed_up == SUCCESS:
        is_new = "true"
        #user_id = str(uuid.uuid4())
    
    resp, msg = initiate_auth(username, password)
    if msg != None:
        return {
        'statusCode': 403,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps(msg)
    }
    id_token = resp['AuthenticationResult']['IdToken']
    body = {'access_token': id_token, 'status': 'active', 'created_date': time}
    return {
        'statusCode': 201,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps(body)
    }